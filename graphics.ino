//  This whole program is for the adafruit ILI9341 display.
//  It was originally desinged for a display that would not have additional vram, 
// (the only difference being that the arduino can now display color, and only updates
//  changed characters)
//  so now it can be easily converted back into a monochrome 320 x 240 character
//  based display. 
//  
//  HOW IT WORKS:
//  the arduino stores a 30x40 byte array which represent the characters on display.
//  when it recieves "m" it assumes the rest of the input is 3 digits for x pos,
//  3 digits for y pos, and 3 digits for the character. (all in base ten)
//  in addition, the arduino stores an array called "color". the first value
//  corresponds to the color black, while the second value corresponds to white.
//  by inputing "c 2016" you can change the color of white. 
//  doing this before an update would change all newly displayed characters to green
//  but doing it while the arduino continues to draw allows an effect similar
//  to a horizontal interupt. 
//
//  the "u" command tells the arduino to update all chars next frame.
//
//  the "s" command instructs the arduino to display all the characters
//  indicated by the "updates" array. 

#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"

#define TFT_DC 9
#define TFT_CS 10


Adafruit_ILI9341 ucg = Adafruit_ILI9341(TFT_CS, TFT_DC);



byte tilemap[30][40];
// I think I can use pin 2,3,4,5,...9,10,11,12,13
char input[5];
int iter = 0;
byte updates[20][2];





const byte  PROGMEM font[][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (space)
  { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0001 (!)
  { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002 (")
  { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0003 (#)
  { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0004 ($)
  { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0005 (%)
  { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0006 (&)
  { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007 (')
  { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0008 (()
  { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0009 ())
  { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+000a (*)
  { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+000b (+)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+000c (,)
  { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+000d (-)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+000e (.)
  { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+000f (/)
  { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0010 (0)
  { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0011 (1)
  { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0012 (2)
  { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0013 (3)
  { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0014 (4)
  { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0015 (5)
  { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0016 (6)
  { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0017 (7)
  { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0018 (8)
  { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0019 (9)
  { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+001A (:)
  { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+001B (//)
  { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+001C (<)
  { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+001D (=)
  { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+001E (>)
  { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+001F (?)
  { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0020 (@)
  { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0021 (A)
  { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0022 (B)
  { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0023 (C)
  { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0024 (D)
  { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0025 (E)
  { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0026 (F)
  { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0027 (G)
  { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0028 (H)
  { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0029 (I)
  { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+002A (J)
  { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+002B (K)
  { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+002C (L)
  { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+002D (M)
  { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+002E (N)
  { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+002F (O)
  { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0030 (P)
  { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0031 (Q)
  { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0032 (R)
  { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0033 (S)
  { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0034 (T)
  { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0035 (U)
  { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0036 (V)
  { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0037 (W)
  { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0038 (X)
  { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0039 (Y)
  { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+003A (Z)
  { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+003B ([)
  { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+003C (\)
  { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+003D (])
  { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+003E (^)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+003F (_)
  { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0040 (`)
  { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0041 (a)
  { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0042 (b)
  { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0043 (c)
  { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0044 (d)
  { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0045 (e)
  { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0046 (f)
  { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0047 (g)
  { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0048 (h)
  { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (i)
  { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+004A (j)
  { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+004B (k)
  { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+004C (l)
  { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+004D (m)
  { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+004E (n)
  { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+004F (o)
  { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0050 (p)
  { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0051 (q)
  { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0052 (r)
  { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0053 (s)
  { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0054 (t)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0055 (u)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (v)
  { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0057 (w)
  { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (x)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0059 (y)
  { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+005A (z)
  { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+005B ({)
  { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+005C (|)
  { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+005D (})
  { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+005E (~)
  { 0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00},   // U+0060 (░)
  { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},   // U+0061 (▒)
  { 0xAA, 0xFF, 0x55, 0xFF, 0xAA, 0xFF, 0x55, 0xFF},   // U+0062 (▓)
  { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},   // U+0063 (│)
  { 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x18, 0x18, 0x18},   // U+0064 (┤)
  { 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18},   // U+0065 (┐)
  { 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x00, 0x00, 0x00},   // U+0066 (└)
  { 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00},   // U+0067 (┴)
  { 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18, 0x18, 0x18},   // U+0068 (┬)
  { 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18},   // U+0069 (├)
  { 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00},   // U+006a (─)
  { 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18},   // U+006b (┼)
  { 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00},   // U+006c (┘)
  { 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18},   // U+006d (┌)
  { 0x00, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x00},   // unknown character
  { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00},   // U+2580 (top half)
  { 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0},   // U+2590 (right half)
  { 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00},   // U+2591 (25% solid)
  { 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA},   // U+2592 (50% solid)
  { 0xFF, 0xAA, 0xFF, 0x55, 0xFF, 0xAA, 0xFF, 0x55},   // U+2593 (75% solid)
  { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+2594 (box 1/8)
  { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},   // U+2595 (box 1/8)
  { 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F},   // U+2596 (box bottom left)
  { 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0},   // U+2597 (box bottom right)
  { 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00},   // U+2598 (box top left)
  { 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2599 (boxes left and bottom)
  { 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0},   // U+259A (boxes top-left and bottom right)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F},   // U+259B (boxes top and left)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0},   // U+259C (boxes top and right)
  { 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00},   // U+259D (box top right)
  { 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F},   // U+259E (boxes top right and bottom left)
  { 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF},   // U+259F (boxes right and bottom)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // empty up arrow
  { 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00},   // empty right arrow
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+2581 (box 1/8)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},   // U+2582 (box 2/8)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},   // U+2583 (box 3/8)
  { 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2584 (bottom half)
  { 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2585 (box 5/8)
  { 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2586 (box 6/8)
  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2587 (box 7/8)
  { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // UPSIDE DOWN U+2581 (box 1/8)
  { 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+2582 (box 2/8)
  { 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+2583 (box 3/8)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00},   // U+2584 (bottom half)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00},   // U+2585 (box 5/8)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00},   // U+2586 (box 6/8)
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // box 7/8
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2588 (solid)
  { 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F},   // U+2589 (box 7/8)
  { 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F},   // U+258A (box 6/8)
  { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F},   // U+258B (box 5/8)
  { 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F},   // U+258C (left half)
  { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07},   // U+258D (box 3/8)
  { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},   // U+258E (box 2/8)
  { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},   // U+258F (box 1/8)
  { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  { 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0},
  { 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0},
  { 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0},
  { 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8},
  { 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC},
  { 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE},

};

const byte  PROGMEM charset2[][8] = {
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},
  {0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00},
  {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80},
  {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01},
  {0x01,0x03,0x07,0x0f,0x1f,0x3f,0x7f,0xff},
  {0xff,0x7f,0x3f,0x1f,0x0f,0x07,0x03,0x01},
  {0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfe,0xff},
  {0xff,0xfe,0xfc,0xf8,0xf0,0xe0,0xc0,0x80},
  {0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00},
  {0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55},
  {0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00},
  {0xc3,0xe7,0x7e,0x3c,0x3c,0x7e,0xe7,0xc3},
  {0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00},
  {0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08},

  };

const byte  PROGMEM charset3[][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0010 (0)
  { 0xFE, 0x01, 0x01, 0xFE, 0x01, 0x01, 0x02, 0xfc},   // weird thing
  { 0x3c, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c},   // Circle
  { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0013 (3)
  { 0x18, 0x3C, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x18},   // diamond
  { 0x99, 0x66, 0x99, 0x66, 0x99, 0x66, 0x99, 0x66},   // low rez checkeboard
  { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},   // highrez cjecekerboard
  { 0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA},   // 3/4 pattern
  { 0xCC, 0x99, 0x33, 0x66, 0x33, 0xCC, 0x99, 0x33},   // slashes
  { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0019 (9)
  { 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18},   // lower half dot
  { 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00},   // top right square
  { 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f},   // bottom right square
  { 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0},   // bottom left square
  { 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00}    // top left square
};

const byte  PROGMEM charset4[][8] = { // boxes
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+2581 (box 1/8)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},   // U+2582 (box 2/8)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},   // U+2583 (box 3/8)
  { 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2584 (bottom half)
  { 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2585 (box 5/8)
  { 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2586 (box 6/8)
  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2587 (box 7/8)   
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},   // U+2588 (solid)
  { 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F},   // U+2589 (box 7/8)
  { 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F},   // U+258A (box 6/8)
  { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F},   // U+258B (box 5/8)
  { 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F},   // U+258C (left half)
  { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07},   // U+258D (box 3/8)
  { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},   // U+258E (box 2/8)
  { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}   // U+258F (box 1/8)  
};




int out_color=0xFFFF;








bool screenupdate = false;
//byte colors[30][5];

byte graphics_mode=1;
int cursorpos=0;
bool Serial_active;

byte scale=1;
byte cull=1;

void setup() {
  pinMode(7, OUTPUT);
  ucg.begin();
  pinMode(2,INPUT);
  Serial.setTimeout(3);
  //ucg.select_font(font);
  // put your setup code here, to run once:
  ucg.fillScreen(0x0000);
  //pinMode(14,OUTPUT);



    Serial.println('D');
    memset(input, 0, sizeof(input));
    Serial.println('S');
    for(int i=0;i<1;i++){
    Serial.println('e');
    }

    delay(100);
    for(int i=0;i<1;i++){
    Serial.println('U');
    }

   

}

void loop() {

  digitalWrite(7,digitalRead(2));

  if(digitalRead(2)==HIGH){
    Serial.begin(115200);
    Serial.readBytes(input,5);
    Serial_active=true;
  }
  else{
    if(Serial_active==true){
      Serial.end();
      Serial_active=false;
    }
  }
  if(input[0]!=0){
   //Serial.println(input);
  }
  
  if (screenupdate) {
  //digitalWrite(7, HIGH);

   for (byte y = 0; y < 40; y++) {
        for (byte x = 0; x < 30; x++) {

          if (bitRead(updates[byte(y/2)][byte(x / 16)], byte(x/2) % 8)) {
          
            byte tile = tilemap[x][y];
            byte tile2;
            byte tile3;
            byte tile4;
            if(graphics_mode>=4){
              tile2=tilemap[(x+15)%30][y];
              tile3=tilemap[x][(y+20)%40 ];
              tile4=tilemap[(x+15)%30 ][(y+20)%40];              
            }
            else{
              for (byte y2=0;y2<8;y2++){
                for (byte x2=0;x2<8;x2++){
                  if (graphics_mode==1){
                    byte pix = pgm_read_byte_near(&font[tile][y2]);
                    
                    byte out = bitRead(pix, x2 );
                    if (out){out_color=0xFFFF;}
                    else{out_color=0x0000;}

                    
                  }
                  else if (graphics_mode==2){
                    byte pix1 = pgm_read_byte_near(&font[tile/16][y2]);
                    byte out1 = bitRead(pix1, x2 );
                    
                    byte pix2 = pgm_read_byte_near(&font[tile%16][y2]);
                    byte out2 = bitRead(pix2, x2 );
                    if (out1^out2){out_color=0xFFFF;}
                    else{out_color=0x0000;}

                    
                  }
                  else if (graphics_mode==3){
                   byte pix1=00;
                   byte pix2=00;
                   //Serial.print(tile>>4, HEX); Serial.print(" ");
                   //Serial.println(tile%16, HEX);
                   if((tile>>4)-(tile%16)>0){
                    
                      pix1 = pgm_read_byte_near(&charset2[(0+tile)/16][y2]);
  
                      pix2 = pgm_read_byte_near(&charset2[(0+tile)%16][y2]);
                   }
                   else{
                     pix1 = pgm_read_byte_near(&charset3[(0+tile)/16][y2]);
  
                     pix2 = pgm_read_byte_near(&charset3[(0+tile)%16][y2]);}
                      
                    byte out1 = bitRead(pix1, x2 );
                    byte out2 = bitRead(pix2, x2 );
                    if (out1^out2){out_color=0xFFFF;}
                    else{out_color=0x0000;}
                    
                  }
                  else if (graphics_mode==4){
                  
                      byte pix1 = pgm_read_byte_near(&font[(0+tile)][y2]);
                      byte pix2 = pgm_read_byte_near(&font[(0+tile2)][y2]);
                      byte pix3 = pgm_read_byte_near(&font[(0+tile3)][y2]);
                      byte pix4 = pgm_read_byte_near(&font[(0+tile4)][y2]);
                      byte out1 = bitRead(pix1, x2 );
                      byte out2 = bitRead(pix2, x2 );
                      byte out3 = bitRead(pix3, x2 );
                      byte out4 = bitRead(pix4, x2 );
                      if ((out1 | out2) | (out3 | out4)){out_color=0xFFFF;}
                      else{out_color=0x0000;}

                    
                    
                  }
                  else if (graphics_mode==5){

                    byte pix = pgm_read_byte_near(&font[tile][y2]);
                    
                    byte out = bitRead(pix, x2 );

                    if (out){out_color=0xFFFF;}
                    else{out_color=0x0000;}
                    
                   
                  }
                  else if (graphics_mode==6){
                    
                    byte pix1 = pgm_read_byte_near(&charset4[tile/16][y2]);
                    bool out1 = bitRead(pix1, x2 );
                    
                    byte pix2 = pgm_read_byte_near(&charset4[tile%16][y2]);
                    bool out2 = bitRead(pix2, x2 );
                    if (out1 or out2){out_color=0xFFFF;}
                    else{out_color=0x0000;}
                  }
                  ucg.fillRect( (x*8+x2)*scale, (y*8+y2)*scale,scale,scale, out_color);
                }  
              }
            }
        }
          
        }
        //Serial.readBytes(input,15);
//        if (input[0]=='c') {
//          color[1][0]=input[1];
//          color[1][1]=input[2];
//          color[1][2]=input[3];
//          //Serial.println(colmor[1]);
//        }
        

    }
    //Serial.println('U');
    screenupdate = false;
    memset(updates, 0, sizeof(updates));
    //Serial.println('D');
    //digitalWrite(7,LOW);
  }

  

  //if (input[0]!=0){for(byte i=0; i<8;i++){Serial.println(String(byte(input[i])));}}
  if (input[0]==109){// Command: "mxyt"
      
      byte x = (input[1])%(byte)(30/cull);
      byte y = (input[2])%(byte)(40/cull);
      byte t = input[3];
      
      tilemap[x][y] = t;
      bitSet(updates[y/2][x/16], (x/2) % 8);
//      if(graphics_mode>=4){
//        bitSet(updates[y/2][((x+15)%30)/16 ], ((x+15)%30)/2 );
//        bitSet(updates[((y+20)%40)/2][((x)%30)/16 ], ((x)%30)/2 );
//        bitSet(updates[((y+20)%40)/2][((x+15)%30)/16 ], ((x+15)%30)/2 );              
//      }
      
      //Serial.println('S');
      //graphics_mode=(graphics_mode+1)%6;

      
  }
    if (input[0]=='g'){// Command: "gxy"
      byte x = (input[1])%(byte)(30/cull);
      byte y = (input[2])%(byte)(40/cull);
      Serial.print('T');
      Serial.print(tilemap[x][y]);

      
  }

  if (input[0]=='A'){// Command: "Ax"
      graphics_mode=input[1];     
  }
  if (input[0]=='C'){// Command: "C" //toggle twice cull
      cull++;    
  }

  if (input[0]=='s'){
      screenupdate = true;
      //memset(updates, 255, sizeof(updates));
      //Serial.println('U');
      
   }
  memset(input, 0, sizeof(input));
  //digitalWrite(7, LOW);
}
